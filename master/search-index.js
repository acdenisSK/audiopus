var searchIndex = JSON.parse('{\
"audiopus":{"doc":"Audiopus is a high level abstraction over the Opus library.","i":[[3,"MutSignals","audiopus","A newtype wrapping around a mutable buffer. They represent…",null,null],[4,"Signal","","",null,null],[13,"Auto","","",0,null],[13,"Voice","","",0,null],[13,"Music","","",0,null],[4,"Bitrate","","",null,null],[13,"BitsPerSecond","","Explicit bitrate choice (in bits/second).",1,null],[13,"Max","","Maximum bitrate allowed (up to maximum number of bytes for…",1,null],[13,"Auto","","Default bitrate decided by the encoder (not recommended).",1,null],[4,"SampleRate","","Represents possible sample rates Opus can use. Values…",null,null],[13,"Hz8000","","",2,null],[13,"Hz12000","","",2,null],[13,"Hz16000","","",2,null],[13,"Hz24000","","",2,null],[13,"Hz48000","","",2,null],[4,"Application","","Represents possible application-types for Opus.",null,null],[13,"Voip","","Best for most VoIP/videoconference applications where…",3,null],[13,"Audio","","Best for broadcast/high-fidelity application where the…",3,null],[13,"LowDelay","","Only use when lowest-achievable latency is what matters…",3,null],[4,"Channels","","Represents possible audio channels Opus can use.",null,null],[13,"Auto","","Not supported when constructing encoders or decoders.",4,null],[13,"Mono","","",4,null],[13,"Stereo","","",4,null],[4,"Bandwidth","","Represents possible bandwidths of an Opus-stream.",null,null],[13,"Auto","","Pick the bandwidth automatically.",5,null],[13,"Narrowband","","A 4kHz bandwidth.",5,null],[13,"Mediumband","","A 6kHz bandwidth.",5,null],[13,"Wideband","","A 8kHz bandwidth.",5,null],[13,"Superwideband","","A 12kHz bandwidth.",5,null],[13,"Fullband","","A 20kHz bandwidth.",5,null],[0,"coder","","",null,null],[3,"Decoder","audiopus::coder","`Decoder` to decode.",null,null],[3,"Encoder","","`Encoder` calls to Opus and offers method to encode and…",null,null],[5,"size","","Gets size of an Opus-decoder in bytes.",null,[[["channels",4]]]],[11,"new","","Creates a new Opus decoder.",6,[[["channels",4],["samplerate",4]],[["decoder",3],["result",6]]]],[11,"decode","","Decodes an Opus packet as `input` and writes decoded data…",6,[[["option",4]],["result",6]]],[11,"decode_float","","Decodes an Opus frame from floating point input.",6,[[["option",4]],["result",6]]],[11,"last_packet_duration","","Gets the duration (in samples) of the last packet…",6,[[],["result",6]]],[11,"pitch","","Gets the pitch period at 48 kHz of the last decoded frame,…",6,[[],["result",6]]],[11,"gain","","Gets the decoder\'s configured amount to scale PCM signal…",6,[[],["result",6]]],[11,"set_gain","","Configures decoder gain adjustment.",6,[[],["result",6]]],[11,"size","","Gets size of self\'s underlying Opus-decoder in bytes.",6,[[]]],[11,"new","","Creates a new Opus encoder.",7,[[["application",4],["channels",4],["samplerate",4]],[["result",6],["encoder",3]]]],[11,"encoder_ctl_request","","Issues a CTL get-`request` to Opus. If Opus returns a…",7,[[],["result",6]]],[11,"set_encoder_ctl_request","","Issues a CTL set-`request` to Opus and sets the…",7,[[],["result",6]]],[11,"encode","","Encodes an Opus frame.",7,[[],["result",6]]],[11,"encode_float","","Encodes an Opus frame from floating point input.",7,[[],["result",6]]],[11,"complexity","","Gets the encoder\'s complexity configuration.",7,[[],["result",6]]],[11,"set_complexity","","Configures the encoder\'s computational complexity.",7,[[],["result",6]]],[11,"application","","Gets the encoder\'s configured application.",7,[[],[["application",4],["result",6]]]],[11,"set_application","","Configures the encoder\'s intended application.",7,[[["application",4]],["result",6]]],[11,"set_bitrate","","Configures the bitrate in the encoder.",7,[[["bitrate",4]],["result",6]]],[11,"bitrate","","Gets the encoder\'s configured bandpass.",7,[[],[["result",6],["bitrate",4]]]],[11,"enable_vbr_constraint","","Enables variable bitrate (VBR) in the encoder.",7,[[],["result",6]]],[11,"disable_vbr_constraint","","Disables variable bitrate (VBR) in the encoder.",7,[[],["result",6]]],[11,"set_vbr_constraint","","Sets variable bitrate (VBR) in the encoder.",7,[[],["result",6]]],[11,"vbr_constraint","","Determine if constrained VBR is enabled in the encoder.",7,[[],["result",6]]],[11,"enable_vbr","","Enables variable bitrate (VBR) in the encoder.",7,[[],["result",6]]],[11,"disable_vbr","","Disables variable bitrate (VBR) in the encoder.",7,[[],["result",6]]],[11,"set_vbr","","Sets variable bitrate (VBR) in the encoder.",7,[[],["result",6]]],[11,"vbr","","Determine if variable bitrate (VBR) is enabled in the…",7,[[],["result",6]]],[11,"set_inband_fec","","Configures the encoder\'s use of inband forward error…",7,[[],["result",6]]],[11,"enable_inband_fec","","Enables the encoder\'s use of inband forward error…",7,[[],["result",6]]],[11,"disable_inband_fec","","Disables the encoder\'s use of inband forward error…",7,[[],["result",6]]],[11,"inband_fec","","Gets encoder\'s configured use of inband forward error…",7,[[],["result",6]]],[11,"packet_loss_perc","","Gets the encoder\'s configured packet loss percentage.",7,[[],["result",6]]],[11,"set_packet_loss_perc","","Higher values trigger progressively more loss resistant…",7,[[],["result",6]]],[11,"lookahead","","Gets the total samples of delay added by the entire codec.",7,[[],["result",6]]],[11,"set_force_channels","","Configures mono/stereo forcing in the encoder.",7,[[["channels",4]],["result",6]]],[11,"force_channels","","Gets the encoder\'s forced channel configuration.",7,[[],[["result",6],["channels",4]]]],[11,"max_bandwidth","","Gets the encoder\'s configured maximum allowed bandpass.",7,[[],[["result",6],["bandwidth",4]]]],[11,"set_max_bandwidth","","Configures the maximum bandpass that the encoder will…",7,[[["bandwidth",4]],["result",6]]],[11,"prediction_disabled","","Gets the encoder\'s configured prediction status.",7,[[],["result",6]]],[11,"set_prediction_disabled","","If set `prediction_disabled` to `true`, disables almost…",7,[[],["result",6]]],[11,"signal","","Gets the encoder\'s configured signal type.",7,[[],[["signal",4],["result",6]]]],[11,"set_signal","","Configures the type of signal being encoded.",7,[[["signal",4]],["result",6]]],[11,"bandwidth","","Gets the encoder\'s configured bandpass.",7,[[],[["result",6],["bandwidth",4]]]],[11,"set_bandwidth","","Sets the encoder\'s bandpass to a specific value.",7,[[["bandwidth",4]],["result",6]]],[8,"GenericCtl","","A set of methods that both `Encoder` and `Decoder` have…",null,null],[10,"final_range","","",8,[[],[["error",4],["result",4]]]],[10,"phase_inversion_disabled","","",8,[[],[["error",4],["result",4]]]],[10,"set_phase_inversion_disabled","","",8,[[],[["error",4],["result",4]]]],[10,"sample_rate","","",8,[[],[["error",4],["result",4],["samplerate",4]]]],[10,"reset_state","","",8,[[],[["error",4],["result",4]]]],[0,"error","audiopus","",null,null],[4,"Error","audiopus::error","",null,null],[13,"InvalidApplication","","A value failed to match a documented `Application`.",9,null],[13,"InvalidBandwidth","","A value failed to match a documented `Bandwidth`.",9,null],[13,"InvalidBitrate","","A value failed to match a documented `Bitrate`, negative…",9,null],[13,"InvalidSignal","","A value failed to match a documented `Signal`.",9,null],[13,"InvalidComplexity","","Complexity was lower than 1 or higher than 10.",9,null],[13,"InvalidSampleRate","","A value failed to match a documented `SampleRate`.",9,null],[13,"InvalidChannels","","A value failed to match a documented `Channels`.",9,null],[13,"Opus","","An error returned from Opus containing an [`ErrorCode`]…",9,null],[13,"EmptyPacket","","Opus is not operating empty packets.",9,null],[13,"SignalsTooLarge","","Opus\' maximum `Vec` or slice length of `std::i32::MAX` has…",9,null],[13,"PacketTooLarge","","Opus\' maximum `Vec` or slice length of `std::i32::MAX` has…",9,null],[13,"MappingExpectedLen","","A `Vec` representing a mapping exceeded the expected value.",9,null],[4,"ErrorCode","","",null,null],[13,"BadArgument","","",10,null],[13,"BufferTooSmall","","",10,null],[13,"InternalError","","",10,null],[13,"InvalidPacket","","",10,null],[13,"Unimplemented","","",10,null],[13,"InvalidState","","",10,null],[13,"AllocFail","","",10,null],[13,"Unknown","","Occurs when Opus sends an error value that is not…",10,null],[5,"try_map_opus_error","","Checks if the `ffi_return_value` is documented by Opus.…",null,[[],["result",6]]],[6,"Result","","",null,null],[0,"packet","audiopus","",null,null],[3,"Packet","audiopus::packet","A newtype around `&[u8]` to guarantee:",null,null],[3,"MutPacket","","A newtype around `&mut [u8]` to guarantee that accessing…",null,null],[5,"bandwidth","","Gets width of an Opus `packet`.",null,[[],[["result",6],["bandwidth",4]]]],[5,"samples_per_frame","","Gets number of samples per frame of an Opus `packet`.",null,[[["samplerate",4]],["result",6]]],[5,"nb_samples","","Gets number of frames in an Opus `packet`.",null,[[["samplerate",4]],["result",6]]],[5,"nb_channels","","",null,[[],[["result",6],["channels",4]]]],[11,"as_ptr","","",11,[[]]],[11,"i32_len","","The underlying type is immutably borrowed and has been…",11,[[]]],[11,"as_mut_ptr","","",12,[[]]],[11,"i32_len","","Checks if the underlying buffer meets requirements.",12,[[],["result",6]]],[0,"repacketizer","audiopus","",null,null],[3,"Repacketizer","audiopus::repacketizer","",null,null],[5,"repacketizer_size","","Returns Opus\' internal `OpusRepacketizer`\'s size in bytes.",null,[[]]],[5,"multistream_packet_pad","","",null,[[],["result",6]]],[5,"multistream_packet_unpad","","",null,[[],["result",6]]],[5,"packet_pad","","",null,[[],["result",6]]],[5,"packet_unpad","","",null,[[],["result",6]]],[11,"new","","",13,[[]]],[11,"nb_frames","","",13,[[]]],[11,"repacketizer_out","","",13,[[],["result",6]]],[11,"repacketizer_out_range","","",13,[[],["result",6]]],[11,"repacketizer_cat","","",13,[[],["result",6]]],[0,"softclip","audiopus","",null,null],[3,"SoftClip","audiopus::softclip","",null,null],[11,"new","","",14,[[["channels",4]]]],[11,"apply","","Opus applies soft-clipping to bring a f32 signal within…",14,[[],["result",6]]],[8,"TryFrom","audiopus","While `TryFrom` is nightly, we use our own implementation…",null,null],[16,"Error","","",15,null],[10,"try_from","","",15,[[],["result",6]]],[8,"TryInto","","While `TryInto` is nightly, we use our own implementation…",null,null],[16,"Error","","",16,null],[10,"try_into","","",16,[[],["result",6]]],[11,"is_mono","","",4,[[]]],[11,"is_stereo","","",4,[[]]],[11,"as_mut_ptr","","",17,[[]]],[11,"i32_len","","Due to checking the length during construction of this…",17,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","audiopus::coder","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","audiopus::error","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","audiopus::packet","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","audiopus::repacketizer","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","audiopus::softclip","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"final_range","audiopus::coder","",6,[[],["result",6]]],[11,"phase_inversion_disabled","","",6,[[],["result",6]]],[11,"set_phase_inversion_disabled","","",6,[[],["result",6]]],[11,"sample_rate","","",6,[[],[["result",6],["samplerate",4]]]],[11,"reset_state","","",6,[[],["result",6]]],[11,"final_range","","Gets the final state of the codec\'s entropy coder.",7,[[],["result",6]]],[11,"phase_inversion_disabled","","Gets the encoder\'s configured phase inversion status.",7,[[],["result",6]]],[11,"set_phase_inversion_disabled","","If set to `true`, disables the use of phase inversion for…",7,[[],["result",6]]],[11,"sample_rate","","Gets the sampling rate the encoder or decoder was…",7,[[],[["result",6],["samplerate",4]]]],[11,"reset_state","","Resets the codec state to be equivalent to a freshly…",7,[[],["result",6]]],[11,"try_from","audiopus","",0,[[],["result",6]]],[11,"try_from","","",1,[[],[["result",6],["bitrate",4]]]],[11,"try_from","","Fails if a number does not map a documented Opus sample…",2,[[],["result",6]]],[11,"try_from","","Fails if a value does not match Opus\' specified…",3,[[],["result",6]]],[11,"try_from","","",4,[[],[["result",6],["channels",4]]]],[11,"try_from","","",5,[[],["result",6]]],[11,"drop","audiopus::coder","We have to ensure that the resource our wrapping…",6,[[]]],[11,"drop","","We have to ensure that the resource our wrapping…",7,[[]]],[11,"drop","audiopus::repacketizer","We have to ensure that the resource our wrapping…",13,[[]]],[11,"from","audiopus::error","",9,[[["errorcode",4]],["error",4]]],[11,"from","","",10,[[],["errorcode",4]]],[11,"clone","","",9,[[],["error",4]]],[11,"clone","","",10,[[],["errorcode",4]]],[11,"clone","audiopus::softclip","",14,[[],["softclip",3]]],[11,"clone","audiopus","",0,[[],["signal",4]]],[11,"clone","","",1,[[],["bitrate",4]]],[11,"clone","","",2,[[],["samplerate",4]]],[11,"clone","","",3,[[],["application",4]]],[11,"clone","","",4,[[],["channels",4]]],[11,"clone","","",5,[[],["bandwidth",4]]],[11,"default","audiopus::repacketizer","",13,[[]]],[11,"eq","audiopus::error","",9,[[["error",4]]]],[11,"ne","","",9,[[["error",4]]]],[11,"eq","","",10,[[["errorcode",4]]]],[11,"eq","audiopus","",0,[[["signal",4]]]],[11,"eq","","",1,[[["bitrate",4]]]],[11,"ne","","",1,[[["bitrate",4]]]],[11,"eq","","",2,[[["samplerate",4]]]],[11,"eq","","",3,[[["application",4]]]],[11,"eq","","",4,[[["channels",4]]]],[11,"eq","","",5,[[["bandwidth",4]]]],[11,"fmt","audiopus::coder","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","audiopus::error","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","audiopus::repacketizer","",13,[[["formatter",3]],["result",6]]],[11,"fmt","audiopus::softclip","",14,[[["formatter",3]],["result",6]]],[11,"fmt","audiopus","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","audiopus::error","",9,[[["formatter",3]],["fmtresult",6]]],[11,"fmt","","",10,[[["formatter",3]],["fmtresult",6]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","audiopus","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"description","audiopus::error","",9,[[]]],[11,"description","","",10,[[]]]],"p":[[4,"Signal"],[4,"Bitrate"],[4,"SampleRate"],[4,"Application"],[4,"Channels"],[4,"Bandwidth"],[3,"Decoder"],[3,"Encoder"],[8,"GenericCtl"],[4,"Error"],[4,"ErrorCode"],[3,"Packet"],[3,"MutPacket"],[3,"Repacketizer"],[3,"SoftClip"],[8,"TryFrom"],[8,"TryInto"],[3,"MutSignals"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);